# -*- coding: utf-8 -*-
"""ML Flow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GOPHeQOUrniLi3QvR-JvDU5rOdjlbd-
"""

# Install required packages: prophet and mlflow
!pip install prophet mlflow --quiet

import pandas as pd
from prophet import Prophet
import mlflow
import mlflow.prophet
from datetime import datetime
from google.colab import files

# Step 3: Upload and Load Data File
uploaded = files.upload()  # Opens a file upload dialog
file_name = list(uploaded.keys())[0]  # Gets the uploaded filename
if file_name.endswith('.csv'):
    df = pd.read_csv(file_name)
elif file_name.endswith('.xls') or file_name.endswith('.xlsx'):
    df = pd.read_excel(file_name)
else:
    print("Unsupported file format. Please upload a .csv or .xlsx file.")
    raise ValueError("Unsupported file format")

print("Columns in the DataFrame:")
print(df.columns)

# Map month names to numbers
month_map = {
    'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,
    'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,
    'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
}
df['Acquisition_Month_Num'] = df['Acquisition_Month'].map(month_map)

# Replace '-' with NaN in relevant columns before creating datetime
# This handles the error where '-' cannot be converted to numeric
df['Acquisition_Year'] = df['Acquisition_Year'].replace('-', pd.NA)
df['Acquisition_Month_Num'] = df['Acquisition_Month_Num'].replace('-', pd.NA) # Although mapping should handle this, it's safer to include

# Create a datetime column 'ds' for Prophet (using first day of the month)
# errors='coerce' will turn any rows that cannot be converted to NaT (Not a Time)
df['ds'] = pd.to_datetime(dict(year=df['Acquisition_Year'], month=df['Acquisition_Month_Num'], day=1), errors='coerce')

# Prepare target variable 'y' as Acquisition_Price
# First, handle non-numeric strings like "undisclosed" by replacing them with NaN
df['Acquisition_Price'] = pd.to_numeric(df['Acquisition_Price'], errors='coerce')

# Now, fill missing prices (including those just converted from non-numeric strings) with 0
df['y'] = df['Acquisition_Price'].fillna(0)

# Select only the columns Prophet needs: ds and y and drop rows with NaT in 'ds' if necessary
ts_data = df[['ds', 'y']].dropna(subset=['ds']).sort_values('ds').reset_index(drop=True)


print("Prepared time series data for Prophet:")
print(ts_data)

import pandas as pd
from prophet import Prophet
import mlflow
import mlflow.prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Assume ts_data is your prepared DataFrame with 'ds' and 'y' columns, sorted by 'ds'
# For example, from your Excel or previous steps:
# ts_data = pd.DataFrame({'ds': [...], 'y': [...]})

# Example dummy data snippet (replace this with your actual ts_data)
# ts_data = pd.read_csv('your_prepared_time_series.csv')

# Define different train-test split ratios to experiment with
train_test_ratios = [0.6, 0.7, 0.8]

for ratio in train_test_ratios:
    # Split data into train and test sets based on ratio
    train_size = int(len(ts_data) * ratio)
    train_df = ts_data.iloc[:train_size]
    test_df = ts_data.iloc[train_size:]

    with mlflow.start_run():
        # Initialize and train Prophet model
        model = Prophet()
        model.fit(train_df)

        # Log train-test ratio parameter
        mlflow.log_param("train_test_ratio", ratio)

        # Create future dataframe for the test period length
        future = model.make_future_dataframe(periods=len(test_df), freq='MS', include_history=False)

        # Predict on the test period
        forecast = model.predict(future)

        # Extract true and predicted values
        y_true = test_df['y'].values
        y_pred = forecast['yhat'].values

        # Calculate evaluation metrics
        mae = mean_absolute_error(y_true, y_pred)
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))

        # Log metrics to MLflow
        mlflow.log_metric("MAE", mae)
        mlflow.log_metric("RMSE", rmse)

        # Log model parameters (example: changepoint_prior_scale)
        mlflow.log_param("changepoint_prior_scale", model.changepoint_prior_scale)
        mlflow.log_param("model_type", "Prophet")

        # Log the trained model
        mlflow.prophet.log_model(model, artifact_path="prophet_model")

        print(f"Run for train-test ratio {ratio} complete: MAE={mae:.2f}, RMSE={rmse:.2f}")